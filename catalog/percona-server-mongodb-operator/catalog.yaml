---
defaultChannel: stable-v1
name: percona-server-mongodb-operator
schema: olm.package
---
entries:
- name: percona-server-mongodb-operator.v1.15.0
name: fast-v1
package: percona-server-mongodb-operator
schema: olm.channel
---
entries:
- name: percona-server-mongodb-operator.v1.14.0
- name: percona-server-mongodb-operator.v1.15.0
  replaces: percona-server-mongodb-operator.v1.14.0
  skips:
  - percona-server-mongodb-operator.v1.14.0
name: stable-v1
package: percona-server-mongodb-operator
schema: olm.channel
---
image: quay.io/operatorhubio/percona-server-mongodb-operator:v1.14.0
name: percona-server-mongodb-operator.v1.14.0
package: percona-server-mongodb-operator
properties:
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-10-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-11-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-12-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-2-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-3-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-4-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-5-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-6-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-7-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-8-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-9-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDBBackup
    version: v1
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDBRestore
    version: v1
- type: olm.package
  value:
    packageName: percona-server-mongodb-operator
    version: 1.14.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDB",
            "metadata": {
              "name": "my-cluster-name",
              "finalizers": [
                "delete-psmdb-pods-in-order"
              ]
            },
            "spec": {
              "crVersion": "1.14.0",
              "image": "docker.io/percona/percona-server-mongodb:6.0.4-3",
              "imagePullPolicy": "Always",
              "allowUnsafeConfigurations": false,
              "updateStrategy": "SmartUpdate",
              "multiCluster": {
                "enabled": false,
                "DNSSuffix": "svc.clusterset.local"
              },
              "upgradeOptions": {
                "versionServiceEndpoint": "https://check.percona.com",
                "apply": "disabled",
                "schedule": "0 2 * * *",
                "setFCV": false
              },
              "secrets": {
                "users": "my-cluster-name-secrets",
                "encryptionKey": "my-cluster-name-mongodb-encryption-key"
              },
              "pmm": {
                "enabled": false,
                "image": "docker.io/percona/pmm-client:2.35.0",
                "serverHost": "monitoring-service"
              },
              "replsets": [
                {
                  "name": "rs0",
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "expose": {
                    "enabled": false,
                    "exposeType": "ClusterIP"
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "volumeSpec": {
                    "persistentVolumeClaim": {
                      "resources": {
                        "requests": {
                          "storage": "3Gi"
                        }
                      }
                    }
                  },
                  "nonvoting": {
                    "enabled": false,
                    "size": 3,
                    "affinity": {
                      "antiAffinityTopologyKey": "kubernetes.io/hostname"
                    },
                    "podDisruptionBudget": {
                      "maxUnavailable": 1
                    },
                    "resources": {
                      "limits": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      },
                      "requests": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      }
                    },
                    "volumeSpec": {
                      "persistentVolumeClaim": {
                        "resources": {
                          "requests": {
                            "storage": "3Gi"
                          }
                        }
                      }
                    }
                  },
                  "arbiter": {
                    "enabled": false,
                    "size": 1,
                    "affinity": {
                      "antiAffinityTopologyKey": "kubernetes.io/hostname"
                    }
                  }
                }
              ],
              "sharding": {
                "enabled": true,
                "configsvrReplSet": {
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "expose": {
                    "enabled": false,
                    "exposeType": "ClusterIP"
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "volumeSpec": {
                    "persistentVolumeClaim": {
                      "resources": {
                        "requests": {
                          "storage": "3Gi"
                        }
                      }
                    }
                  }
                },
                "mongos": {
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "expose": {
                    "exposeType": "ClusterIP"
                  }
                }
              },
              "backup": {
                "enabled": true,
                "image": "docker.io/percona/percona-backup-mongodb:2.0.4",
                "serviceAccountName": "percona-server-mongodb-operator",
                "pitr": {
                  "enabled": false,
                  "compressionType": "gzip",
                  "compressionLevel": 6
                }
              }
            }
          },
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDBBackup",
            "metadata": {
              "name": "backup1"
            },
            "spec": {
              "clusterName": "my-cluster-name",
              "storageName": "s3-us-west"
            }
          },
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDBRestore",
            "metadata": {
              "name": "restore1"
            },
            "spec": {
              "backupName": "backup1",
              "clusterName": "my-cluster-name"
            }
          }
        ]
      capabilities: Deep Insights
      categories: Database
      certified: "true"
      containerImage: docker.io/percona/percona-server-mongodb-operator:1.14.0
      createdAt: "2023-03-13T10:35:26.000Z"
      description: Percona Distribution for MongoDB Operator automates the creation,
        modification, or deletion of items in your Percona Server for MongoDB environment
      olm.skipRange: <v1.14.0
      repository: https://github.com/percona/percona-server-mongodb-operator
      support: Percona
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: Instance of a Percona Server for MongoDB replica set
        displayName: PerconaServerMongoDB
        kind: PerconaServerMongoDB
        name: perconaservermongodbs.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
      - description: Instance of a Percona Server for MongoDB Backup
        displayName: PerconaServerMongoDBBackup
        kind: PerconaServerMongoDBBackup
        name: perconaservermongodbbackups.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
      - description: Instance of a Percona Server for MongoDB Restore
        displayName: PerconaServerMongoDBRestore
        kind: PerconaServerMongoDBRestore
        name: perconaservermongodbrestores.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
    description: |2+

      ## Percona is Cloud Native
      The Percona Distribution for MongoDB Kubernetes Operator automates the creation, modification, or deletion of items in your Percona Server for MongoDB environment. The Operator contains the necessary Kubernetes settings to maintain a consistent Percona Server for MongoDB instance modification, or deletion of items in your Percona Server for MongoDB environment. The Operator contains the necessary Kubernetes settings to maintain a consistent Percona Server for MongoDB instance.

      Consult the [documentation](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html/) on the Percona Kubernetes Operator for Percona Server for MongoDB for complete details on capabilities and options.

      ### Supported Features

      * **Scale Your Cluster** - change the `size` parameter to [add or remove members](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/scaling.html) of the replica set. Three is the minimum recommended size for a functioning replica set.

      * **Add Monitoring** - [Percona Monitoring and Management (PMM) can be easily deployed](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/monitoring.html) to monitor your Percona Server for MongoDB replica set(s). The recommended installation process uses Helm, the package manager for Kubernetes.

      * **Automate Your Backups** - [configure automatic backups](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/backups.html) to run on a scheduled basis or run an on-demand backup at any time. Backups are performed using Percona Backup for MongoDB (PBM) and can be stored on local PVs or in any S3-compatible cloud storage provider.

      ### Common Configurations

      * **Set Member as Arbiter** - [Set up a replica set which contains an arbiter](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/arbiter.html), which participates in elections but does not store any data.  This reduces storage costs while helping maintain replica set integrity.

      * **Expose Members Outside K8S** - [by appropriately configuring the ServiceType](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/expose.html) you can expose replica set members outside of Kubernetes or provide statically assigned IP addresses.

      * **Utilize Local Storage Options** - [with support for Local Storage you can mount existing data directories](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/storage.html) into your replica set managed by Kubernetes or utilize high performance hardware for local storage rather than network storage for your database.

      ### Before You Start

      Add the PSMDB user `Secret` to Kubernetes. User information must be placed in the data section of the `secrets.yaml`
      file with Base64-encoded logins and passwords for the user accounts.

      Below is a sample `secrets.yaml` file for the correct formatting.

      ```
      apiVersion: v1
      kind: Secret
      metadata:
        name: my-cluster-name-secrets
      type: Opaque
      data:
        MONGODB_BACKUP_USER: YmFja3Vw
        MONGODB_BACKUP_PASSWORD: YmFja3VwMTIzNDU2
        MONGODB_CLUSTER_ADMIN_USER: Y2x1c3RlckFkbWlu
        MONGODB_CLUSTER_ADMIN_PASSWORD: Y2x1c3RlckFkbWluMTIzNDU2
        MONGODB_CLUSTER_MONITOR_USER: Y2x1c3Rlck1vbml0b3I=
        MONGODB_CLUSTER_MONITOR_PASSWORD: Y2x1c3Rlck1vbml0b3IxMjM0NTY=
        MONGODB_USER_ADMIN_USER: dXNlckFkbWlu
        MONGODB_USER_ADMIN_PASSWORD: dXNlckFkbWluMTIzNDU2
        PMM_SERVER_API_KEY: dXNlckFkbWluMTIzNDU2
      ```
      ### Release Highlights
      * Backups and Restores are critical for business continuity. With this release you can significantly reduce your Recovery Time Objective (RTO) with Physical backups support in the Operator. The feature is now in technical preview. * MongoDB 6.0 comes with a variety of improvements and new features. It is now fully supported by the Operator. See our documentation to learn how to upgrade.

    displayName: Percona Distribution for MongoDB Operator
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: false
      type: AllNamespaces
    keywords:
    - mongodb
    - percona
    - database
    - replicaset
    - shard
    links:
    - name: Percona
      url: https://www.percona.com/
    - name: Percona Kubernetes Operators Landing Page
      url: https://www.percona.com/software/percona-kubernetes-operators
    - name: Documentation
      url: https://percona.github.io/percona-server-mongodb-operator/
    - name: Github
      url: https://github.com/percona/percona-server-mongodb-operator
    maintainers:
    - email: info@percona.com
      name: Percona
    maturity: stable
    provider:
      name: Percona
relatedImages:
- image: docker.io/percona/percona-server-mongodb-operator:1.14.0
  name: ""
- image: quay.io/operatorhubio/percona-server-mongodb-operator:v1.14.0
  name: ""
schema: olm.bundle
---
image: quay.io/operatorhubio/percona-server-mongodb-operator:v1.15.0
name: percona-server-mongodb-operator.v1.15.0
package: percona-server-mongodb-operator
properties:
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-10-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-11-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-12-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-2-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-3-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-4-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-5-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-6-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-7-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-8-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-9-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDBBackup
    version: v1
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDBRestore
    version: v1
- type: olm.package
  value:
    packageName: percona-server-mongodb-operator
    version: 1.15.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDB",
            "metadata": {
              "name": "my-cluster-name",
              "finalizers": [
                "delete-psmdb-pods-in-order"
              ]
            },
            "spec": {
              "crVersion": "1.15.0",
              "image": "docker.io/percona/percona-server-mongodb:6.0.9-7",
              "imagePullPolicy": "Always",
              "allowUnsafeConfigurations": false,
              "updateStrategy": "SmartUpdate",
              "multiCluster": {
                "enabled": false,
                "DNSSuffix": "svc.clusterset.local"
              },
              "upgradeOptions": {
                "versionServiceEndpoint": "https://check.percona.com",
                "apply": "disabled",
                "schedule": "0 2 * * *",
                "setFCV": false
              },
              "secrets": {
                "users": "my-cluster-name-secrets",
                "encryptionKey": "my-cluster-name-mongodb-encryption-key"
              },
              "pmm": {
                "enabled": false,
                "image": "docker.io/percona/pmm-client:2.39.0",
                "serverHost": "monitoring-service"
              },
              "replsets": [
                {
                  "name": "rs0",
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "expose": {
                    "enabled": false,
                    "exposeType": "ClusterIP"
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "volumeSpec": {
                    "persistentVolumeClaim": {
                      "resources": {
                        "requests": {
                          "storage": "3Gi"
                        }
                      }
                    }
                  },
                  "nonvoting": {
                    "enabled": false,
                    "size": 3,
                    "affinity": {
                      "antiAffinityTopologyKey": "kubernetes.io/hostname"
                    },
                    "podDisruptionBudget": {
                      "maxUnavailable": 1
                    },
                    "resources": {
                      "limits": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      },
                      "requests": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      }
                    },
                    "volumeSpec": {
                      "persistentVolumeClaim": {
                        "resources": {
                          "requests": {
                            "storage": "3Gi"
                          }
                        }
                      }
                    }
                  },
                  "arbiter": {
                    "enabled": false,
                    "size": 1,
                    "affinity": {
                      "antiAffinityTopologyKey": "kubernetes.io/hostname"
                    },
                    "resources": {
                      "limits": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      },
                      "requests": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      }
                    }
                  }
                }
              ],
              "sharding": {
                "enabled": true,
                "configsvrReplSet": {
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "expose": {
                    "enabled": false,
                    "exposeType": "ClusterIP"
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "volumeSpec": {
                    "persistentVolumeClaim": {
                      "resources": {
                        "requests": {
                          "storage": "3Gi"
                        }
                      }
                    }
                  }
                },
                "mongos": {
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "expose": {
                    "exposeType": "ClusterIP"
                  }
                }
              },
              "backup": {
                "enabled": true,
                "image": "docker.io/percona/percona-backup-mongodb:2.3.0",
                "serviceAccountName": "percona-server-mongodb-operator",
                "pitr": {
                  "enabled": false,
                  "oplogOnly": false,
                  "compressionType": "gzip",
                  "compressionLevel": 6
                }
              }
            }
          },
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDBBackup",
            "metadata": {
              "name": "backup1"
            },
            "spec": {
              "clusterName": "my-cluster-name",
              "storageName": "s3-us-west"
            }
          },
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDBRestore",
            "metadata": {
              "name": "restore1"
            },
            "spec": {
              "backupName": "backup1",
              "clusterName": "my-cluster-name"
            }
          }
        ]
      capabilities: Deep Insights
      categories: Database
      certified: "true"
      containerImage: docker.io/percona/percona-server-mongodb-operator:1.15.0
      createdAt: "2023-03-13T10:35:26.000Z"
      description: Percona Distribution for MongoDB Operator automates the creation,
        modification, or deletion of items in your Percona Server for MongoDB environment
      olm.skipRange: <v1.15.0
      repository: https://github.com/percona/percona-server-mongodb-operator
      support: Percona
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: Instance of a Percona Server for MongoDB replica set
        displayName: PerconaServerMongoDB
        kind: PerconaServerMongoDB
        name: perconaservermongodbs.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
      - description: Instance of a Percona Server for MongoDB Backup
        displayName: PerconaServerMongoDBBackup
        kind: PerconaServerMongoDBBackup
        name: perconaservermongodbbackups.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
      - description: Instance of a Percona Server for MongoDB Restore
        displayName: PerconaServerMongoDBRestore
        kind: PerconaServerMongoDBRestore
        name: perconaservermongodbrestores.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
    description: |2+

      ## Percona is Cloud Native
      The Percona Distribution for MongoDB Kubernetes Operator automates the creation, modification, or deletion of items in your Percona Server for MongoDB environment. The Operator contains the necessary Kubernetes settings to maintain a consistent Percona Server for MongoDB instance modification, or deletion of items in your Percona Server for MongoDB environment. The Operator contains the necessary Kubernetes settings to maintain a consistent Percona Server for MongoDB instance.

      Consult the [documentation](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html/) on the Percona Kubernetes Operator for Percona Server for MongoDB for complete details on capabilities and options.

      ### Supported Features

      * **Scale Your Cluster** - change the `size` parameter to [add or remove members](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/scaling.html) of the replica set. Three is the minimum recommended size for a functioning replica set.

      * **Add Monitoring** - [Percona Monitoring and Management (PMM) can be easily deployed](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/monitoring.html) to monitor your Percona Server for MongoDB replica set(s). The recommended installation process uses Helm, the package manager for Kubernetes.

      * **Automate Your Backups** - [configure automatic backups](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/backups.html) to run on a scheduled basis or run an on-demand backup at any time. Backups are performed using Percona Backup for MongoDB (PBM) and can be stored on local PVs or in any S3-compatible cloud storage provider.

      ### Common Configurations

      * **Set Member as Arbiter** - [Set up a replica set which contains an arbiter](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/arbiter.html), which participates in elections but does not store any data.  This reduces storage costs while helping maintain replica set integrity.

      * **Expose Members Outside K8S** - [by appropriately configuring the ServiceType](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/expose.html) you can expose replica set members outside of Kubernetes or provide statically assigned IP addresses.

      * **Utilize Local Storage Options** - [with support for Local Storage you can mount existing data directories](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/storage.html) into your replica set managed by Kubernetes or utilize high performance hardware for local storage rather than network storage for your database.

      ### Before You Start

      Add the PSMDB user `Secret` to Kubernetes. User information must be placed in the data section of the `secrets.yaml`
      file with Base64-encoded logins and passwords for the user accounts.

      Below is a sample `secrets.yaml` file for the correct formatting.

      ```
      apiVersion: v1
      kind: Secret
      metadata:
        name: my-cluster-name-secrets
      type: Opaque
      data:
        MONGODB_BACKUP_USER: YmFja3Vw
        MONGODB_BACKUP_PASSWORD: YmFja3VwMTIzNDU2
        MONGODB_CLUSTER_ADMIN_USER: Y2x1c3RlckFkbWlu
        MONGODB_CLUSTER_ADMIN_PASSWORD: Y2x1c3RlckFkbWluMTIzNDU2
        MONGODB_CLUSTER_MONITOR_USER: Y2x1c3Rlck1vbml0b3I=
        MONGODB_CLUSTER_MONITOR_PASSWORD: Y2x1c3Rlck1vbml0b3IxMjM0NTY=
        MONGODB_USER_ADMIN_USER: dXNlckFkbWlu
        MONGODB_USER_ADMIN_PASSWORD: dXNlckFkbWluMTIzNDU2
        PMM_SERVER_API_KEY: dXNlckFkbWluMTIzNDU2
      ```
      ### Release Highlights * Physical Backups now support Point-in-time Recovery (in tech preview)
        In the previous 1.14.0 release we added support for Physical Backups and Restores to significantly reduce Recovery Time Objective (RTO), especially for big data sets.
        But the problem with losing data between backups - in other words Recovery Point Objective (RPO) - for physical backups was not solved.
        With this release users can greatly reduce RPO by leveraging the Point-in-time Recovery feature in the Operators.
        Under the hood we store logical oplogs along with physical backups into the object storage. Read more about this feature in our documentation.

      * Encrypted backups with Server Side Encryption (SSE)
        Backups stored on S3 compatible storage can now be encrypted with Server Side Encryption (SSE) to pass certain compliance or security requirements.
        Users can leverage integration with AWS KMS or just encrypt/decrypt backups with AES-256 encryption algorithm.
        It is important to remember that Operator does not store keys and users can choose which key storage to use.


    displayName: Percona Distribution for MongoDB Operator
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: false
      type: AllNamespaces
    keywords:
    - mongodb
    - percona
    - database
    - replicaset
    - shard
    links:
    - name: Percona
      url: https://www.percona.com/
    - name: Percona Kubernetes Operators Landing Page
      url: https://www.percona.com/software/percona-kubernetes-operators
    - name: Documentation
      url: https://percona.github.io/percona-server-mongodb-operator/
    - name: Github
      url: https://github.com/percona/percona-server-mongodb-operator
    maintainers:
    - email: info@percona.com
      name: Percona
    maturity: stable
    provider:
      name: Percona
relatedImages:
- image: docker.io/percona/percona-server-mongodb-operator:1.15.0
  name: ""
- image: quay.io/operatorhubio/percona-server-mongodb-operator:v1.15.0
  name: ""
schema: olm.bundle
