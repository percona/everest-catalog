---
defaultChannel: stable-v1
name: percona-server-mongodb-operator
schema: olm.package
---
entries:
- name: percona-server-mongodb-operator.v1.18.0
- name: percona-server-mongodb-operator.v1.19.0
  replaces: percona-server-mongodb-operator.v1.18.0
  skips:
  - percona-server-mongodb-operator.v1.18.0
name: stable-v1
package: percona-server-mongodb-operator
schema: olm.channel
---
image: docker.io/percona/percona-server-mongodb-operator:1.18.0-community-bundle
name: percona-server-mongodb-operator.v1.18.0
package: percona-server-mongodb-operator
properties:
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-10-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-11-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-12-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-2-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-3-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-4-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-5-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-6-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-7-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-8-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-9-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDBBackup
    version: v1
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDBRestore
    version: v1
- type: olm.package
  value:
    packageName: percona-server-mongodb-operator
    version: 1.18.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDB",
            "metadata": {
              "name": "my-cluster-name",
              "finalizers": [
                "percona.com/delete-psmdb-pods-in-order"
              ]
            },
            "spec": {
              "crVersion": "1.18.0",
              "image": "docker.io/percona/percona-server-mongodb:7.0.14-8-multi",
              "imagePullPolicy": "Always",
              "initImage": "docker.io/percona/percona-server-mongodb-operator:1.18.0",
              "updateStrategy": "SmartUpdate",
              "upgradeOptions": {
                "versionServiceEndpoint": "https://check.percona.com",
                "apply": "disabled",
                "schedule": "0 2 * * *",
                "setFCV": false
              },
              "secrets": {
                "users": "my-cluster-name-secrets",
                "encryptionKey": "my-cluster-name-mongodb-encryption-key"
              },
              "pmm": {
                "enabled": false,
                "image": "docker.io/percona/pmm-client:2.43.2",
                "serverHost": "monitoring-service"
              },
              "replsets": [
                {
                  "name": "rs0",
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "expose": {
                    "enabled": false,
                    "type": "ClusterIP"
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "volumeSpec": {
                    "persistentVolumeClaim": {
                      "resources": {
                        "requests": {
                          "storage": "3Gi"
                        }
                      }
                    }
                  },
                  "nonvoting": {
                    "enabled": false,
                    "size": 3,
                    "affinity": {
                      "antiAffinityTopologyKey": "kubernetes.io/hostname"
                    },
                    "podDisruptionBudget": {
                      "maxUnavailable": 1
                    },
                    "resources": {
                      "limits": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      },
                      "requests": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      }
                    },
                    "volumeSpec": {
                      "persistentVolumeClaim": {
                        "resources": {
                          "requests": {
                            "storage": "3Gi"
                          }
                        }
                      }
                    }
                  },
                  "arbiter": {
                    "enabled": false,
                    "size": 1,
                    "affinity": {
                      "antiAffinityTopologyKey": "kubernetes.io/hostname"
                    },
                    "resources": {
                      "limits": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      },
                      "requests": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      }
                    }
                  }
                }
              ],
              "sharding": {
                "enabled": true,
                "configsvrReplSet": {
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "expose": {
                    "enabled": false,
                    "type": "ClusterIP"
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "volumeSpec": {
                    "persistentVolumeClaim": {
                      "resources": {
                        "requests": {
                          "storage": "3Gi"
                        }
                      }
                    }
                  }
                },
                "mongos": {
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "expose": {
                    "type": "ClusterIP"
                  }
                }
              },
              "backup": {
                "enabled": true,
                "image": "docker.io/percona/percona-backup-mongodb:2.7.0-multi",
                "serviceAccountName": "percona-server-mongodb-operator",
                "pitr": {
                  "enabled": false,
                  "oplogOnly": false,
                  "compressionType": "gzip",
                  "compressionLevel": 6
                }
              }
            }
          },
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDBBackup",
            "metadata": {
              "name": "backup1"
            },
            "spec": {
              "clusterName": "my-cluster-name",
              "storageName": "s3-us-west"
            }
          },
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDBRestore",
            "metadata": {
              "name": "restore1"
            },
            "spec": {
              "backupName": "backup1",
              "clusterName": "my-cluster-name"
            }
          }
        ]
      capabilities: Deep Insights
      categories: Database
      certified: "true"
      containerImage: docker.io/percona/percona-server-mongodb-operator:1.18.0
      createdAt: "2024-11-06T22:44:24.3Z"
      description: Percona Distribution for MongoDB Operator automates the creation,
        modification, or deletion of items in your Percona Server for MongoDB environment
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "false"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.skipRange: <1.18.0
      repository: https://github.com/percona/percona-server-mongodb-operator
      support: Percona
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: Instance of a Percona Server for MongoDB replica set
        displayName: PerconaServerMongoDB
        kind: PerconaServerMongoDB
        name: perconaservermongodbs.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
      - description: Instance of a Percona Server for MongoDB Backup
        displayName: PerconaServerMongoDBBackup
        kind: PerconaServerMongoDBBackup
        name: perconaservermongodbbackups.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
      - description: Instance of a Percona Server for MongoDB Restore
        displayName: PerconaServerMongoDBRestore
        kind: PerconaServerMongoDBRestore
        name: perconaservermongodbrestores.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
    description: |2+

      ## Percona is Cloud Native
      The Percona Distribution for MongoDB Kubernetes Operator automates the creation, modification, or deletion of items in your Percona Server for MongoDB environment. The Operator contains the necessary Kubernetes settings to maintain a consistent Percona Server for MongoDB instance modification, or deletion of items in your Percona Server for MongoDB environment. The Operator contains the necessary Kubernetes settings to maintain a consistent Percona Server for MongoDB instance.

      Consult the [documentation](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html) on the Percona Kubernetes Operator for Percona Server for MongoDB for complete details on capabilities and options.

      ### Supported Features

      * **Scale Your Cluster** - change the `size` parameter to [add or remove members](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/scaling.html) of the replica set. Three is the minimum recommended size for a functioning replica set.

      * **Add Monitoring** - [Percona Monitoring and Management (PMM) can be easily deployed](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/monitoring.html) to monitor your Percona Server for MongoDB replica set(s). The recommended installation process uses Helm, the package manager for Kubernetes.

      * **Automate Your Backups** - [configure automatic backups](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/backups.html) to run on a scheduled basis or run an on-demand backup at any time. Backups are performed using Percona Backup for MongoDB (PBM) and can be stored on local PVs or in any S3-compatible cloud storage provider. physical Backups - [configure physical backups](https://docs.percona.com/percona-operator-for-mongodb/backups.html#physical)
      * **Automated volume expansion** - Kubernetes supports the Persistent Volume expansion as a stable feature since v1.24. Using it with the Operator previously involved manual operations. Now this is automated, and users can resize their PVCs by just changing the value of the resources.requests.storage option in the PerconaServerMongoDB custom resource. This feature is in a technical preview stage and is not recommended for production environments.

      ### Common Configurations

      * **Set Member as Arbiter** - [Set up a replica set which contains an arbiter](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/arbiter.html), which participates in elections but does not store any data. This reduces storage costs while helping maintain replica set integrity.

      * **Expose Members Outside K8S** - [by appropriately configuring the ServiceType](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/expose.html) you can expose replica set members outside of Kubernetes or provide statically assigned IP addresses.

      * **Utilize Local Storage Options** - [with support for Local Storage you can mount existing data directories](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/storage.html) into your replica set managed by Kubernetes or utilize high performance hardware for local storage rather than network storage for your database.

      ### Before You Start

      Add the PSMDB user `Secret` to Kubernetes. User information must be placed in the data section of the `secrets.yaml`
      file with Base64-encoded logins and passwords for the user accounts.

      Below is a sample `secrets.yaml` file for the correct formatting.

      ```
      apiVersion: v1
      kind: Secret
      metadata:
        name: my-cluster-name-secrets
      type: Opaque
      data:
        MONGODB_BACKUP_USER: YmFja3Vw
        MONGODB_BACKUP_PASSWORD: YmFja3VwMTIzNDU2
        MONGODB_DATABASE_ADMIN_USER: ZGF0YWJhc2VBZG1pbgo=
        MONGODB_DATABASE_ADMIN_PASSWORD: ZGF0YWJhc2VBZG1pbjEyMzQ1Ngo=
        MONGODB_CLUSTER_ADMIN_USER: Y2x1c3RlckFkbWlu
        MONGODB_CLUSTER_ADMIN_PASSWORD: Y2x1c3RlckFkbWluMTIzNDU2
        MONGODB_CLUSTER_MONITOR_USER: Y2x1c3Rlck1vbml0b3I=
        MONGODB_CLUSTER_MONITOR_PASSWORD: Y2x1c3Rlck1vbml0b3IxMjM0NTY=
        MONGODB_USER_ADMIN_USER: dXNlckFkbWlu
        MONGODB_USER_ADMIN_PASSWORD: dXNlckFkbWluMTIzNDU2
        PMM_SERVER_API_KEY: dXNlckFkbWluMTIzNDU2
      ```
      ### Release Highlights
      * **Enhancements of the user management (technical preview)**
      Before the Operator version 1.17.0 custom MongoDB users had to be created manually. Now the declarative creation of custom MongoDB users is supported via the users subsection in the Custom Resource. You can specify a new user in deploy/cr.yaml manifest, setting the user’s login name and database, PasswordSecretRef (a reference to a key in a Secret resource containing user’s password) and as well as MongoDB roles on various databases which should be assigned to this use.
      * **Support for selective restores**
      Percona Backup for MongoDB 2.0.0 has introduced new functionality which allows partial restores, which means selectively restore only with the desired subset of data. Now the Operator also supports this feature, allowing you to restore a specific database or a collection from a backup. You can achieve this by using an additional selective section in the PerconaServerMongoDBRestore Custom Resource.
      * **Split-horizon DNS configuration for external nodes** Using split-horizon DNS with cross-site replication now allows users to configure horizons for external nodes in the Custom Resource in the replsets.externalNodes subsection.

    displayName: Percona Distribution for MongoDB Operator
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: false
      type: AllNamespaces
    keywords:
    - mongodb
    - percona
    - database
    - replicaset
    - shard
    links:
    - name: Percona
      url: https://www.percona.com/
    - name: Percona Kubernetes Operators Landing Page
      url: https://www.percona.com/software/percona-kubernetes-operators
    - name: Documentation
      url: https://percona.github.io/percona-server-mongodb-operator/
    - name: Github
      url: https://github.com/percona/percona-server-mongodb-operator
    maintainers:
    - email: info@percona.com
      name: Percona
    maturity: stable
    provider:
      name: Percona
relatedImages:
- image: docker.io/percona/percona-server-mongodb-operator:1.18.0
  name: ""
- image: docker.io/percona/percona-server-mongodb-operator:1.18.0-community-bundle
  name: ""
schema: olm.bundle
---
image: docker.io/percona/percona-server-mongodb-operator:1.19.0-community-bundle
name: percona-server-mongodb-operator.v1.19.0
package: percona-server-mongodb-operator
properties:
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-10-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-11-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-12-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-2-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-3-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-4-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-5-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-6-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-7-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-8-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDB
    version: v1-9-0
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDBBackup
    version: v1
- type: olm.gvk
  value:
    group: psmdb.percona.com
    kind: PerconaServerMongoDBRestore
    version: v1
- type: olm.package
  value:
    packageName: percona-server-mongodb-operator
    version: 1.19.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDB",
            "metadata": {
              "name": "my-cluster-name",
              "finalizers": [
                "percona.com/delete-psmdb-pods-in-order"
              ]
            },
            "spec": {
              "crVersion": "1.19.0",
              "image": "docker.io/percona/percona-server-mongodb:8.0.4-1-multi",
              "imagePullPolicy": "Always",
              "initImage": "docker.io/percona/percona-server-mongodb-operator:1.19.0",
              "updateStrategy": "SmartUpdate",
              "upgradeOptions": {
                "versionServiceEndpoint": "https://check.percona.com",
                "apply": "disabled",
                "schedule": "0 2 * * *",
                "setFCV": false
              },
              "secrets": {
                "users": "my-cluster-name-secrets",
                "encryptionKey": "my-cluster-name-mongodb-encryption-key"
              },
              "pmm": {
                "enabled": false,
                "image": "docker.io/percona/pmm-client:2.44.0",
                "serverHost": "monitoring-service"
              },
              "replsets": [
                {
                  "name": "rs0",
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "expose": {
                    "enabled": false,
                    "type": "ClusterIP"
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "volumeSpec": {
                    "persistentVolumeClaim": {
                      "resources": {
                        "requests": {
                          "storage": "3Gi"
                        }
                      }
                    }
                  },
                  "nonvoting": {
                    "enabled": false,
                    "size": 3,
                    "affinity": {
                      "antiAffinityTopologyKey": "kubernetes.io/hostname"
                    },
                    "podDisruptionBudget": {
                      "maxUnavailable": 1
                    },
                    "resources": {
                      "limits": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      },
                      "requests": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      }
                    },
                    "volumeSpec": {
                      "persistentVolumeClaim": {
                        "resources": {
                          "requests": {
                            "storage": "3Gi"
                          }
                        }
                      }
                    }
                  },
                  "arbiter": {
                    "enabled": false,
                    "size": 1,
                    "affinity": {
                      "antiAffinityTopologyKey": "kubernetes.io/hostname"
                    },
                    "resources": {
                      "limits": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      },
                      "requests": {
                        "cpu": "300m",
                        "memory": "0.5G"
                      }
                    }
                  }
                }
              ],
              "sharding": {
                "enabled": true,
                "configsvrReplSet": {
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "expose": {
                    "enabled": false,
                    "type": "ClusterIP"
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "volumeSpec": {
                    "persistentVolumeClaim": {
                      "resources": {
                        "requests": {
                          "storage": "3Gi"
                        }
                      }
                    }
                  }
                },
                "mongos": {
                  "size": 3,
                  "affinity": {
                    "antiAffinityTopologyKey": "kubernetes.io/hostname"
                  },
                  "podDisruptionBudget": {
                    "maxUnavailable": 1
                  },
                  "resources": {
                    "limits": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    },
                    "requests": {
                      "cpu": "300m",
                      "memory": "0.5G"
                    }
                  },
                  "expose": {
                    "type": "ClusterIP"
                  }
                }
              },
              "backup": {
                "enabled": true,
                "image": "docker.io/percona/percona-backup-mongodb:2.8.0-multi",
                "serviceAccountName": "percona-server-mongodb-operator",
                "pitr": {
                  "enabled": false,
                  "oplogOnly": false,
                  "compressionType": "gzip",
                  "compressionLevel": 6
                }
              }
            }
          },
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDBBackup",
            "metadata": {
              "name": "backup1"
            },
            "spec": {
              "clusterName": "my-cluster-name",
              "storageName": "s3-us-west"
            }
          },
          {
            "apiVersion": "psmdb.percona.com/v1",
            "kind": "PerconaServerMongoDBRestore",
            "metadata": {
              "name": "restore1"
            },
            "spec": {
              "backupName": "backup1",
              "clusterName": "my-cluster-name"
            }
          }
        ]
      capabilities: Deep Insights
      categories: Database
      certified: "true"
      containerImage: docker.io/percona/percona-server-mongodb-operator:1.19.0
      createdAt: "2025-01-17T13:30:14.2Z"
      description: Percona Distribution for MongoDB Operator automates the creation,
        modification, or deletion of items in your Percona Server for MongoDB environment
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "false"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.skipRange: <1.19.0
      repository: https://github.com/percona/percona-server-mongodb-operator
      support: Percona
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: Instance of a Percona Server for MongoDB replica set
        displayName: PerconaServerMongoDB
        kind: PerconaServerMongoDB
        name: perconaservermongodbs.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
      - description: Instance of a Percona Server for MongoDB Backup
        displayName: PerconaServerMongoDBBackup
        kind: PerconaServerMongoDBBackup
        name: perconaservermongodbbackups.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
      - description: Instance of a Percona Server for MongoDB Restore
        displayName: PerconaServerMongoDBRestore
        kind: PerconaServerMongoDBRestore
        name: perconaservermongodbrestores.psmdb.percona.com
        resources:
        - kind: Deployment
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: ReplicaSet
          name: ""
          version: v1
        - kind: Pod
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: ConfigMap
          name: ""
          version: v1
        version: v1
    description: |2+

      ## Percona is Cloud Native
      The Percona Distribution for MongoDB Kubernetes Operator automates the creation, modification, or deletion of items in your Percona Server for MongoDB environment. The Operator contains the necessary Kubernetes settings to maintain a consistent Percona Server for MongoDB instance modification, or deletion of items in your Percona Server for MongoDB environment. The Operator contains the necessary Kubernetes settings to maintain a consistent Percona Server for MongoDB instance.

      Consult the [documentation](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/index.html) on the Percona Kubernetes Operator for Percona Server for MongoDB for complete details on capabilities and options.

      ### Supported Features

      * **Scale Your Cluster** - change the `size` parameter to [add or remove members](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/scaling.html) of the replica set. Three is the minimum recommended size for a functioning replica set.

      * **Add Monitoring** - [Percona Monitoring and Management (PMM) can be easily deployed](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/monitoring.html) to monitor your Percona Server for MongoDB replica set(s). The recommended installation process uses Helm, the package manager for Kubernetes.

      * **Automate Your Backups** - [configure automatic backups](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/backups.html) to run on a scheduled basis or run an on-demand backup at any time. Backups are performed using Percona Backup for MongoDB (PBM) and can be stored on local PVs or in any S3-compatible cloud storage provider. physical Backups - [configure physical backups](https://docs.percona.com/percona-operator-for-mongodb/backups.html#physical)
      * **Automated volume expansion** - Kubernetes supports the Persistent Volume expansion as a stable feature since v1.24. Using it with the Operator previously involved manual operations. Now this is automated, and users can resize their PVCs by just changing the value of the resources.requests.storage option in the PerconaServerMongoDB custom resource. This feature is in a technical preview stage and is not recommended for production environments.

      ### Common Configurations

      * **Set Member as Arbiter** - [Set up a replica set which contains an arbiter](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/arbiter.html), which participates in elections but does not store any data. This reduces storage costs while helping maintain replica set integrity.

      * **Expose Members Outside K8S** - [by appropriately configuring the ServiceType](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/expose.html) you can expose replica set members outside of Kubernetes or provide statically assigned IP addresses.

      * **Utilize Local Storage Options** - [with support for Local Storage you can mount existing data directories](https://www.percona.com/doc/kubernetes-operator-for-psmongodb/storage.html) into your replica set managed by Kubernetes or utilize high performance hardware for local storage rather than network storage for your database.

      ### Before You Start

      Add the PSMDB user `Secret` to Kubernetes. User information must be placed in the data section of the `secrets.yaml`
      file with Base64-encoded logins and passwords for the user accounts.

      Below is a sample `secrets.yaml` file for the correct formatting.

      ```
      apiVersion: v1
      kind: Secret
      metadata:
        name: my-cluster-name-secrets
      type: Opaque
      data:
        MONGODB_BACKUP_USER: YmFja3Vw
        MONGODB_BACKUP_PASSWORD: YmFja3VwMTIzNDU2
        MONGODB_DATABASE_ADMIN_USER: ZGF0YWJhc2VBZG1pbgo=
        MONGODB_DATABASE_ADMIN_PASSWORD: ZGF0YWJhc2VBZG1pbjEyMzQ1Ngo=
        MONGODB_CLUSTER_ADMIN_USER: Y2x1c3RlckFkbWlu
        MONGODB_CLUSTER_ADMIN_PASSWORD: Y2x1c3RlckFkbWluMTIzNDU2
        MONGODB_CLUSTER_MONITOR_USER: Y2x1c3Rlck1vbml0b3I=
        MONGODB_CLUSTER_MONITOR_PASSWORD: Y2x1c3Rlck1vbml0b3IxMjM0NTY=
        MONGODB_USER_ADMIN_USER: dXNlckFkbWlu
        MONGODB_USER_ADMIN_PASSWORD: dXNlckFkbWluMTIzNDU2
        PMM_SERVER_API_KEY: dXNlckFkbWluMTIzNDU2
      ```
      ### Release Highlights
      * **Using remote file server for backups (tech preview)**

      The new filesystem backup storage type was added in this release in addition to already existing s3 and azure types. It allows users to mount a remote file server to a local directory, and make Percona Backup for MongoDB using this directory as a storage for backups. The approach is based on common Network File System (NFS) protocol, and should be useful in network-restricted environments without S3-compatible storage or in cases with a non-standard storage service supporting NFS access.
      * **Generated passwords for custom MongoDB users**

      A new improvement for the [declarative management of custom MongoDB users](https://docs.percona.com/percona-operator-for-mongodb/users.html#unprivileged-users) brings the possibility to use automatic generation of users passwords. When you specify a new user in deploy/cr.yaml configuration file, you can omit specifying a reference to an already existing Secret with the user's password, and the Operator will generate it automatically.
      * **Percona Server for MongoDB 8.0 support**

      Percona Server for MongoDB 8.0 is now supported by the Operator in addition to 6.0 and 7.0 versions. The appropriate images are now included into the list of [Percona-certified images](https://docs.percona.com/percona-operator-for-mongodb/images.html). See [this blogpost](https://www.percona.com/blog/percona-server-for-mongodb-8-0-most-performant-ever/) for details about the latest MongoDB 8.0 features with the added reliability and performance improvements.

    displayName: Percona Distribution for MongoDB Operator
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: false
      type: AllNamespaces
    keywords:
    - mongodb
    - percona
    - database
    - replicaset
    - shard
    links:
    - name: Percona
      url: https://www.percona.com/
    - name: Percona Kubernetes Operators Landing Page
      url: https://www.percona.com/software/percona-kubernetes-operators
    - name: Documentation
      url: https://percona.github.io/percona-server-mongodb-operator/
    - name: Github
      url: https://github.com/percona/percona-server-mongodb-operator
    maintainers:
    - email: info@percona.com
      name: Percona
    maturity: stable
    provider:
      name: Percona
relatedImages:
- image: docker.io/percona/percona-server-mongodb-operator:1.19.0
  name: ""
- image: docker.io/percona/percona-server-mongodb-operator:1.19.0-community-bundle
  name: ""
schema: olm.bundle
