---
defaultChannel: stable-v2
name: percona-postgresql-operator
schema: olm.package
---
entries:
- name: percona-postgresql-operator.v2.3.1
name: stable-v2
package: percona-postgresql-operator
schema: olm.channel
---
image: docker.io/perconalab/percona-postgresql-operator:2.3.1-community-bundle
name: percona-postgresql-operator.v2.3.1
package: percona-postgresql-operator
properties:
- type: olm.gvk
  value:
    group: pgv2.percona.com
    kind: PerconaPGBackup
    version: v2
- type: olm.gvk
  value:
    group: pgv2.percona.com
    kind: PerconaPGCluster
    version: v2
- type: olm.gvk
  value:
    group: pgv2.percona.com
    kind: PerconaPGRestore
    version: v2
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: percona-postgresql-operator
    version: 2.3.1
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "pgv2.percona.com/v2",
            "kind": "PerconaPGCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "image": "percona/percona-postgresql-operator:2.3.1-ppg16-pgbackrest",
                  "manual": {
                    "options": [
                      "--type=full"
                    ],
                    "repoName": "repo1"
                  },
                  "repos": [
                    {
                      "name": "repo1",
                      "schedules": {
                        "full": "0 0 * * 6"
                      },
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "image": "percona/percona-postgresql-operator:2.3.1-ppg16-postgres",
              "imagePullPolicy": "Always",
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "name": "instance1"
                }
              ],
              "pmm": {
                "enabled": false,
                "image": "percona/pmm-client:2.41.0",
                "secret": "example-pmm-secret",
                "serverHost": "monitoring-service"
              },
              "postgresVersion": 15,
              "proxy": {
                "pgBouncer": {
                  "image": "percona/percona-postgresql-operator:2.3.1-ppg16-pgbouncer"
                }
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Database
      containerImage: percona/percona-postgresql-operator:2.3.1
      createdAt: 2024-01-24T09:48:01UTC
      description: Percona Operator for PostgreSQL manages the lifecycle of Percona
        PostgreSQL cluster instances.
      olm.properties: '[]'
      olm.skipRange: '>=2.0.0 <v2.3.1'
      repository: https://github.com/percona/percona-postgresql-operator
      support: percona.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PerconaPGCluster is the CRD that defines a Percona PG Cluster
        displayName: Percona PGCluster
        kind: PerconaPGCluster
        name: perconapgclusters.pgv2.percona.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers.
          displayName: Image
          path: image
        - description: PostgreSQL backup configuration
          displayName: Backups
          path: backups
        - description: The specification of extensions.
          displayName: Extensions
          path: extensions
        - description: 'ImagePullPolicy is used to determine when Kubernetes will
            attempt to pull (download) container images. More info: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy'
          displayName: Image Pull Policy
          path: imagePullPolicy
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        - description: The specification of PMM sidecars.
          displayName: PMM
          path: pmm
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: The specification of a proxy that connects to PostgreSQL.
          displayName: Proxy
          path: proxy
        statusDescriptors:
        - displayName: Host
          path: host
        - displayName: PGBouncer
          path: pgbouncer
        - displayName: Postgres
          path: postgres
        - displayName: State
          path: state
        version: v2
      - description: PerconaPGBackup is the CRD that defines a Percona PostgreSQL
          Backup
        displayName: Percona PGBackup
        kind: PerconaPGBackup
        name: perconapgbackups.pgv2.percona.com
        resources:
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Job
          name: ""
          version: v1
        version: v2
      - description: PerconaPGRestore is the CRD that defines a Percona PostgreSQL
          Restore
        displayName: Percona PGRestore
        kind: PerconaPGRestore
        name: perconapgrestores.pgv2.percona.com
        resources:
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Job
          name: ""
          version: v1
        version: v2
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      ## Percona is Cloud Native


      Percona Operator for PostgreSQL automates and simplifies deploying and managing
      open source PostgreSQL clusters on Kubernetes. Percona Operator for PostgreSQL is based on Postgres Operator developed by Crunchy Data.

      Whether you need to get a simple PostgreSQL cluster up and running, need to deploy a high availability,
      fault tolerant cluster in production, or are running your own database-as-a-service, the Operator provides the essential
      features you need to keep your clusters healthy.

      Consult the
      [documentation](https://www.percona.com/doc/kubernetes-operator-for-postgresql/index.html)
      on the Percona Operator for PostgreSQL for complete details on capabilities
      and options.

      ### Supported Features

      * **PostgreSQL Cluster Provisioning**

      Create, Scale, & Delete PostgreSQL clusters with ease, while fully customizing your Pods and PostgreSQL configuration.

      * **High Availability**

          Safe, automated failover backed by a distributed consensus based high-availability solution. Uses Pod Anti-Affinity to help resiliency; you can configure how much
          enforced this can be. Failed primaries automatically heal, allowing for faster recovery time. Support for standby PostgreSQL clusters that work both within and
          across multiple Kubernetes clusters.

      * **Disaster Recovery**

          Backups and restores leverage the open source pgBackRest utility and includes support for full, incremental, and differential backups as well as efficient delta
          restores. Set how long you want your backups retained for. Works great with very large databases!

      * **Communication Security**

          Secure communication between your applications and data servers by enabling TLS for your PostgreSQL servers, including the ability to enforce all of your connections
          to use TLS.

      * **Monitoring**

          Track the health of your PostgreSQL clusters with Percona Monitoring and Management (PMM).

      * **PostgreSQL User Management**

          Quickly add and remove users from your PostgreSQL clusters with powerful commands. Manage password expiration policies or use your preferred PostgreSQL authentication
          scheme.

      * **Updates Management**

          Safely apply PostgreSQL updates with minimal availability impact to your PostgreSQL clusters.

      * **Advanced Replication Support**

          Choose between asynchronous replication and synchronous replication for workloads that are sensitive to losing transactions.

      * **Clone**

          Create new clusters from your existing clusters or backups.

      * **Connection Pooling**

          Use [pgBouncer](https://access.crunchydata.com/documentation/postgres-operator/latest/tutorial/pgbouncer/) for connection pooling

      * **Affinity and Tolerations**

          Have your PostgreSQL clusters deployed to Kubernetes Nodes of your preference with node affinity, or designate which nodes Kubernetes can schedule PostgreSQL instances
          to with Kubernetes  tolerations.

      * **Scheduled Backups**

          Choose the type of backup (full, incremental, differential) and how frequently you want it to occur on each PostgreSQL cluster.

      * **Backup to S3**

          Store your backups in Amazon S3 or any object storage system that supports the S3 protocol. The Operator can backup, restore, and create new clusters from these backups.

      * **Multi-Namespace Support**

          You can control how the Operator leverages Kubernetes Namespaces with several different deployment models:

          * Deploy the Operator and all PostgreSQL clusters to the same namespace
          * Deploy the Operator to one Namespace, and all PostgreSQL clusters to a different Namespace
          * Deploy the Operator to one Namespace, and have your PostgreSQL clusters managed across multiple Namespaces

      * **Full Customizability**

          The Operator not only makes it easy to get PostgreSQL up and running on Kubernetes-enabled platforms, but also allows you to further customize your deployments:

          * Selecting different storage classes for your primary, replica, and backup storage
          * Select your own container resources class for each PostgreSQL cluster deployment; differentiate between resources applied for primary and replica clusters
          * Use your own container image repository, including `imagePullSecrets` and private repositories  support
          * Customize your PostgreSQL configuration
          * Bring your own trusted certificate authority (CA) for use with the Operator API server
          * Override your PostgreSQL configuration for each cluster
          * Use your own custom images, re-define the image for each container separately
    displayName: Percona Operator for PostgreSQL
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - percona
    links:
    - name: Percona
      url: https://www.percona.com/
    - name: Documentation
      url: https://docs.percona.com/percona-operator-for-postgresql/index.html
    maintainers:
    - email: info@percona.com
      name: Percona
    maturity: stable
    minKubeVersion: 1.24.0
    provider:
      name: Percona
      url: https://www.percona.com/
relatedImages:
- image: docker.io/perconalab/percona-postgresql-operator:2.3.1-community-bundle
  name: ""
- image: percona/percona-postgresql-operator:2.3.1
  name: ""
schema: olm.bundle
